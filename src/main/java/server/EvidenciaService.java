
package server;

import java.util.Date;
import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "EvidenciaService", targetNamespace = "http://server/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface EvidenciaService {


    /**
     * 
     * @param idUcastnikov
     * @param datumACas
     * @param idPredmetu
     * @return
     *     returns java.lang.Long
     * @throws NepodariloSaVyrobitPrezencnuListinuException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "pridajPrezencnuListinu", targetNamespace = "http://server/", className = "server.PridajPrezencnuListinu")
    @ResponseWrapper(localName = "pridajPrezencnuListinuResponse", targetNamespace = "http://server/", className = "server.PridajPrezencnuListinuResponse")
    @Action(input = "http://server/EvidenciaService/pridajPrezencnuListinuRequest", output = "http://server/EvidenciaService/pridajPrezencnuListinuResponse", fault = {
        @FaultAction(className = NepodariloSaVyrobitPrezencnuListinuException.class, value = "http://server/EvidenciaService/pridajPrezencnuListinu/Fault/NepodariloSaVyrobitPrezencnuListinuException")
    })
    public Long pridajPrezencnuListinu(
        @WebParam(name = "idPredmetu", targetNamespace = "")
        Long idPredmetu,
        @WebParam(name = "datumACas", targetNamespace = "")
        Date datumACas,
        @WebParam(name = "idUcastnikov", targetNamespace = "")
        List<Long> idUcastnikov)
        throws NepodariloSaVyrobitPrezencnuListinuException
    ;

    /**
     * 
     * @param idUcastnika
     * @return
     *     returns java.util.List<server.PrezencnaListina>
     * @throws NeexistujuciUcastnikException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "vratPrezencneListiny", targetNamespace = "http://server/", className = "server.VratPrezencneListiny")
    @ResponseWrapper(localName = "vratPrezencneListinyResponse", targetNamespace = "http://server/", className = "server.VratPrezencneListinyResponse")
    @Action(input = "http://server/EvidenciaService/vratPrezencneListinyRequest", output = "http://server/EvidenciaService/vratPrezencneListinyResponse", fault = {
        @FaultAction(className = NeexistujuciUcastnikException.class, value = "http://server/EvidenciaService/vratPrezencneListiny/Fault/NeexistujuciUcastnikException")
    })
    public List<PrezencnaListina> vratPrezencneListiny(
        @WebParam(name = "idUcastnika", targetNamespace = "")
        Long idUcastnika)
        throws NeexistujuciUcastnikException
    ;

    /**
     * 
     * @param priezvisko
     * @param meno
     * @return
     *     returns java.lang.Long
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "pridajUcastnika", targetNamespace = "http://server/", className = "server.PridajUcastnika")
    @ResponseWrapper(localName = "pridajUcastnikaResponse", targetNamespace = "http://server/", className = "server.PridajUcastnikaResponse")
    @Action(input = "http://server/EvidenciaService/pridajUcastnikaRequest", output = "http://server/EvidenciaService/pridajUcastnikaResponse")
    public Long pridajUcastnika(
        @WebParam(name = "meno", targetNamespace = "")
        String meno,
        @WebParam(name = "priezvisko", targetNamespace = "")
        String priezvisko);

    /**
     * 
     * @param nazov
     * @return
     *     returns java.lang.Long
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "pridajPredmet", targetNamespace = "http://server/", className = "server.PridajPredmet")
    @ResponseWrapper(localName = "pridajPredmetResponse", targetNamespace = "http://server/", className = "server.PridajPredmetResponse")
    @Action(input = "http://server/EvidenciaService/pridajPredmetRequest", output = "http://server/EvidenciaService/pridajPredmetResponse")
    public Long pridajPredmet(
        @WebParam(name = "nazov", targetNamespace = "")
        String nazov);

    /**
     * 
     * @param idPrezencnejListiny
     * @return
     *     returns java.util.List<server.Ucastnik>
     * @throws NeexistujucaPrezencnaListinaException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "vratUcastnikov", targetNamespace = "http://server/", className = "server.VratUcastnikov")
    @ResponseWrapper(localName = "vratUcastnikovResponse", targetNamespace = "http://server/", className = "server.VratUcastnikovResponse")
    @Action(input = "http://server/EvidenciaService/vratUcastnikovRequest", output = "http://server/EvidenciaService/vratUcastnikovResponse", fault = {
        @FaultAction(className = NeexistujucaPrezencnaListinaException.class, value = "http://server/EvidenciaService/vratUcastnikov/Fault/NeexistujucaPrezencnaListinaException")
    })
    public List<Ucastnik> vratUcastnikov(
        @WebParam(name = "idPrezencnejListiny", targetNamespace = "")
        Long idPrezencnejListiny)
        throws NeexistujucaPrezencnaListinaException
    ;

}
